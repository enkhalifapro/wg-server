package main

import (
	"fmt"
	"log"
	"net"
	"time"
	"wg-server/wireguard"
	"wg-server/wireguard/datastruct"
)

func main() {
	fmt.Println("WG scanning.....")
	wgMgr, err := wireguard.NewManager()
	if err != nil {
		fmt.Println("err1")
		panic(err)
	}

	keyProvider := wireguard.NewKeyProvider()
	/*
		defer wgMgr.Close()
		devices, err := wgMgr.Devices()
			if err != nil {
				fmt.Println("err2")
				panic(err)
			}

			fmt.Println("devicesssss")
			fmt.Println(len(devices))
			for _, d := range devices {
				fmt.Println(d.Name)
				fmt.Println(d.PublicKey)
				fmt.Println(d.PrivateKey)
				fmt.Println(d.Type)
				fmt.Println(d.FirewallMark)
				fmt.Println(d.ListenPort)
				fmt.Println(d.Peers)
			}*/

	fmt.Println("Configure a new device")
	port := 19860
	k, err := keyProvider.GeneratePrivateKey()
	if err != nil {
		fmt.Println("error adding wg interface")
		panic(err)
	}

	pub, err := keyProvider.ParseKey("C9VaGN9qYYWPi4IKnbM9uv75E6iL9pBqY+i+XjUc13o=") // Should be generated by the remote peer
	if err != nil {
		log.Fatalf("failed to parse public key: %v", err)
	}

	ka := 20 * time.Second

	err = wgMgr.ConfigureDevice("wg0", datastruct.DeviceConfig{
		PrivateKey:   &k,
		ListenPort:   &port,
		ReplacePeers: true,
		Peers: []datastruct.PeerConfig{
			{
				PublicKey:  pub,
				Remove:     false,
				UpdateOnly: false,
				Endpoint: &net.UDPAddr{
					IP:   net.ParseIP("192.168.22.44"),
					Port: 51800,
				},
				PersistentKeepaliveInterval: &ka,
				ReplaceAllowedIPs:           true,
				AllowedIPs: []net.IPNet{
					{
						IP:   net.ParseIP("0.0.0.0"),
						Mask: net.ParseIP("0.0.0.0").DefaultMask(),
					},
				},
			},
		},
	})
	if err != nil {
		fmt.Println("error adding wg interface")
		panic(err)
	}

}
